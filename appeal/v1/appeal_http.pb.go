// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.0
// source: appeal/v1/appeal.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppealOpCreateAppeal = "/api.appeal.v1.Appeal/OpCreateAppeal"

type AppealHTTPServer interface {
	OpCreateAppeal(context.Context, *OpCreateAppealRequest) (*OpCreateAppealReply, error)
}

func RegisterAppealHTTPServer(s *http.Server, srv AppealHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/op/opcreate", _Appeal_OpCreateAppeal0_HTTP_Handler(srv))
}

func _Appeal_OpCreateAppeal0_HTTP_Handler(srv AppealHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OpCreateAppealRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppealOpCreateAppeal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpCreateAppeal(ctx, req.(*OpCreateAppealRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OpCreateAppealReply)
		return ctx.Result(200, reply)
	}
}

type AppealHTTPClient interface {
	OpCreateAppeal(ctx context.Context, req *OpCreateAppealRequest, opts ...http.CallOption) (rsp *OpCreateAppealReply, err error)
}

type AppealHTTPClientImpl struct {
	cc *http.Client
}

func NewAppealHTTPClient(client *http.Client) AppealHTTPClient {
	return &AppealHTTPClientImpl{client}
}

func (c *AppealHTTPClientImpl) OpCreateAppeal(ctx context.Context, in *OpCreateAppealRequest, opts ...http.CallOption) (*OpCreateAppealReply, error) {
	var out OpCreateAppealReply
	pattern := "/v1/op/opcreate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppealOpCreateAppeal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
