// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/appeal/v1/appeal.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OpCreateAppealRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpCreateAppealRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpCreateAppealRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpCreateAppealRequestMultiError, or nil if none found.
func (m *OpCreateAppealRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OpCreateAppealRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppealId() <= 0 {
		err := OpCreateAppealRequestValidationError{
			field:  "AppealId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpRemark()) < 2 {
		err := OpCreateAppealRequestValidationError{
			field:  "OpRemark",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOpUser()) < 2 {
		err := OpCreateAppealRequestValidationError{
			field:  "OpUser",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OpCreateAppealRequestMultiError(errors)
	}

	return nil
}

// OpCreateAppealRequestMultiError is an error wrapping multiple validation
// errors returned by OpCreateAppealRequest.ValidateAll() if the designated
// constraints aren't met.
type OpCreateAppealRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpCreateAppealRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpCreateAppealRequestMultiError) AllErrors() []error { return m }

// OpCreateAppealRequestValidationError is the validation error returned by
// OpCreateAppealRequest.Validate if the designated constraints aren't met.
type OpCreateAppealRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpCreateAppealRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpCreateAppealRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpCreateAppealRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpCreateAppealRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpCreateAppealRequestValidationError) ErrorName() string {
	return "OpCreateAppealRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpCreateAppealRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpCreateAppealRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpCreateAppealRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpCreateAppealRequestValidationError{}

// Validate checks the field values on OpCreateAppealReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpCreateAppealReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpCreateAppealReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpCreateAppealReplyMultiError, or nil if none found.
func (m *OpCreateAppealReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OpCreateAppealReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OpCreateAppealReplyMultiError(errors)
	}

	return nil
}

// OpCreateAppealReplyMultiError is an error wrapping multiple validation
// errors returned by OpCreateAppealReply.ValidateAll() if the designated
// constraints aren't met.
type OpCreateAppealReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpCreateAppealReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpCreateAppealReplyMultiError) AllErrors() []error { return m }

// OpCreateAppealReplyValidationError is the validation error returned by
// OpCreateAppealReply.Validate if the designated constraints aren't met.
type OpCreateAppealReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpCreateAppealReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpCreateAppealReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpCreateAppealReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpCreateAppealReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpCreateAppealReplyValidationError) ErrorName() string {
	return "OpCreateAppealReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OpCreateAppealReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpCreateAppealReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpCreateAppealReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpCreateAppealReplyValidationError{}

// Validate checks the field values on UpdateAppealRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppealRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppealRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppealRequestMultiError, or nil if none found.
func (m *UpdateAppealRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppealRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAppealRequestMultiError(errors)
	}

	return nil
}

// UpdateAppealRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAppealRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAppealRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppealRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppealRequestMultiError) AllErrors() []error { return m }

// UpdateAppealRequestValidationError is the validation error returned by
// UpdateAppealRequest.Validate if the designated constraints aren't met.
type UpdateAppealRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppealRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppealRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppealRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppealRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppealRequestValidationError) ErrorName() string {
	return "UpdateAppealRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppealRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppealRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppealRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppealRequestValidationError{}

// Validate checks the field values on UpdateAppealReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppealReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppealReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppealReplyMultiError, or nil if none found.
func (m *UpdateAppealReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppealReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAppealReplyMultiError(errors)
	}

	return nil
}

// UpdateAppealReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateAppealReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppealReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppealReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppealReplyMultiError) AllErrors() []error { return m }

// UpdateAppealReplyValidationError is the validation error returned by
// UpdateAppealReply.Validate if the designated constraints aren't met.
type UpdateAppealReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppealReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppealReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppealReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppealReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppealReplyValidationError) ErrorName() string {
	return "UpdateAppealReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppealReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppealReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppealReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppealReplyValidationError{}

// Validate checks the field values on DeleteAppealRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAppealRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppealRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAppealRequestMultiError, or nil if none found.
func (m *DeleteAppealRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppealRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAppealRequestMultiError(errors)
	}

	return nil
}

// DeleteAppealRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAppealRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAppealRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppealRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppealRequestMultiError) AllErrors() []error { return m }

// DeleteAppealRequestValidationError is the validation error returned by
// DeleteAppealRequest.Validate if the designated constraints aren't met.
type DeleteAppealRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppealRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppealRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppealRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppealRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppealRequestValidationError) ErrorName() string {
	return "DeleteAppealRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppealRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppealRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppealRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppealRequestValidationError{}

// Validate checks the field values on DeleteAppealReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAppealReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppealReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAppealReplyMultiError, or nil if none found.
func (m *DeleteAppealReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppealReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAppealReplyMultiError(errors)
	}

	return nil
}

// DeleteAppealReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteAppealReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteAppealReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppealReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppealReplyMultiError) AllErrors() []error { return m }

// DeleteAppealReplyValidationError is the validation error returned by
// DeleteAppealReply.Validate if the designated constraints aren't met.
type DeleteAppealReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppealReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppealReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppealReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppealReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppealReplyValidationError) ErrorName() string {
	return "DeleteAppealReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppealReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppealReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppealReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppealReplyValidationError{}

// Validate checks the field values on GetAppealRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAppealRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppealRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppealRequestMultiError, or nil if none found.
func (m *GetAppealRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppealRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAppealRequestMultiError(errors)
	}

	return nil
}

// GetAppealRequestMultiError is an error wrapping multiple validation errors
// returned by GetAppealRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAppealRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppealRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppealRequestMultiError) AllErrors() []error { return m }

// GetAppealRequestValidationError is the validation error returned by
// GetAppealRequest.Validate if the designated constraints aren't met.
type GetAppealRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppealRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppealRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppealRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppealRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppealRequestValidationError) ErrorName() string { return "GetAppealRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAppealRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppealRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppealRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppealRequestValidationError{}

// Validate checks the field values on GetAppealReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppealReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppealReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppealReplyMultiError,
// or nil if none found.
func (m *GetAppealReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppealReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAppealReplyMultiError(errors)
	}

	return nil
}

// GetAppealReplyMultiError is an error wrapping multiple validation errors
// returned by GetAppealReply.ValidateAll() if the designated constraints
// aren't met.
type GetAppealReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppealReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppealReplyMultiError) AllErrors() []error { return m }

// GetAppealReplyValidationError is the validation error returned by
// GetAppealReply.Validate if the designated constraints aren't met.
type GetAppealReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppealReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppealReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppealReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppealReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppealReplyValidationError) ErrorName() string { return "GetAppealReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAppealReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppealReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppealReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppealReplyValidationError{}

// Validate checks the field values on ListAppealRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAppealRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppealRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppealRequestMultiError, or nil if none found.
func (m *ListAppealRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppealRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAppealRequestMultiError(errors)
	}

	return nil
}

// ListAppealRequestMultiError is an error wrapping multiple validation errors
// returned by ListAppealRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAppealRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppealRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppealRequestMultiError) AllErrors() []error { return m }

// ListAppealRequestValidationError is the validation error returned by
// ListAppealRequest.Validate if the designated constraints aren't met.
type ListAppealRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppealRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppealRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppealRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppealRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppealRequestValidationError) ErrorName() string {
	return "ListAppealRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppealRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppealRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppealRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppealRequestValidationError{}

// Validate checks the field values on ListAppealReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAppealReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppealReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAppealReplyMultiError, or nil if none found.
func (m *ListAppealReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppealReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAppealReplyMultiError(errors)
	}

	return nil
}

// ListAppealReplyMultiError is an error wrapping multiple validation errors
// returned by ListAppealReply.ValidateAll() if the designated constraints
// aren't met.
type ListAppealReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppealReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppealReplyMultiError) AllErrors() []error { return m }

// ListAppealReplyValidationError is the validation error returned by
// ListAppealReply.Validate if the designated constraints aren't met.
type ListAppealReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppealReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppealReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppealReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppealReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppealReplyValidationError) ErrorName() string { return "ListAppealReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAppealReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppealReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppealReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppealReplyValidationError{}
